/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        int i = 0;
        int n = intervals.size();
        ArrayList<Interval> MergedIntervals = new ArrayList<>();

        //Add the interval which are come before new interval
        while(i < n && intervals.get(i).end < newInterval.start){
            MergedIntervals.add(intervals.get(i));
            i++;
        }

        //Merge overlapping interval
        while(i < n && intervals.get(i).start <= newInterval.end){
            newInterval.start = Math.min(intervals.get(i).start , newInterval.start);
            newInterval.end = Math.max(intervals.get(i).end , newInterval.end);
            i++;
        }

        //Add the merged interval
        MergedIntervals.add(newInterval);

        //Add all the inteval come after newInterval
        while(i < n){
            MergedIntervals.add(intervals.get(i));
            i++;
        }

        return MergedIntervals;

    }
}
